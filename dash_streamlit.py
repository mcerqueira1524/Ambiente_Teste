import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
from functools import reduce
from io import BytesIO
from st_pages import Page, Section, add_page_title, show_pages

#teste
favicon = Image.open("favicon.ico")

st.set_page_config(page_title = "Dash 360 IOL 2023", layout="wide", initial_sidebar_state="collapsed")

show_pages(
    [
        Page("leia_me.py", "Leia Me", ":books:"),
        #Page("pages/painel_metas.py", "Painel de Metas", ":dart:"), [[AJUSTAR]]
        Page("dash_streamlit.py", "Dash Macro", ":bar_chart:"),
        Page("dash_micro.py", "Dash Micro", ":female-student:"),
        Page("filtro_base.py", "Filtro e Download Base", ":pushpin:"),
        Page("one_page.py", "Informa√ß√µes Gerais e Hist√≥ricas", ":1234:"),
    ]
)

#ano atual para facilitar a transi√ß√£o entre anos
ano_hoje = '2023'

def check_password():
    """Returns `True` if the user had a correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if (
            st.session_state["username"] in st.secrets["passwords"]
            and st.session_state["password"]
            == st.secrets["passwords"][st.session_state["username"]]
        ):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # don't store username + password
            del st.session_state["username"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        # First run, show inputs for username + password.
        st.text_input("Usu√°rio", on_change=password_entered, key="username")
        st.text_input(
            "Senha", type="password", on_change=password_entered, key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        # Password not correct, show input + error.
        st.text_input("Usu√°rio", on_change=password_entered, key="username")
        st.text_input(
            "Senha", type="password", on_change=password_entered, key="password"
        )
        st.error("üòï Usu√°rio desconhecido ou senha incorreta.")
        return False
    else:
        # Password correct.
        return True

if check_password():
    #limpar o cache e atualizar as planilhas

    #@st.cache_data.clear()

    #importando dash 360 de 2022 [[AJUSTAR]]
    @st.cache_data
    def importar_dash2022():
        df_dash2022 = pd.read_excel(r"Dash 360 Final_2022.xlsx")
        df_dash2022 = df_dash2022[df_dash2022['Status'] == 'ATIVO']
        return df_dash2022
    
    df_dash2022 = importar_dash2022()

    #importando o Dash 360 de 2023
    @st.cache_data
    def importar_dash360():
        df_dash360 = pd.read_excel(r"Dash 360 Final_Tratado.xlsx")
        return df_dash360
    
    #importando o engajamento hist√≥rico por semana
    @st.cache_data
    def importar_historico_2022():
        df_2022 = pd.read_excel(r"Historico_2022_Tratado.xlsx")
        return df_2022

    #importando o engajamento hist√≥rico por semana
    @st.cache_data
    def importar_historico_2021():
        df_2021 = pd.read_excel(r"Historico_2021_Tratado.xlsx")
        return df_2021

    @st.cache_data
    def importar_historico_2020():
        df_2020 = pd.read_excel(r"Historico_2020_Tratado.xlsx")
        return df_2020

    df_dash360 = importar_dash360()
    df_2021 = importar_historico_2021()
    df_2020 = importar_historico_2020()
    df_2022 = importar_historico_2022()
    
    meses = ['Abril','Maio','Junho','Julho','Agosto', 'Setembro', 'Outubro', 'Novembro','Dezembro']
    
    #importando o engajamento hist√≥rico por m√™s
    @st.cache_data
    def importar_yoy_2022():
        df_2022_yoy = pd.read_excel(r"Hist√≥rico Mensal Engajamento.xlsx", sheet_name = "2022")
        df_2022_yoy = df_2022_yoy[df_2022_yoy['Status'] == "ATIVO"]
        return df_2022_yoy  
    
    @st.cache_data
    def importar_yoy_2021():
        df_2021_yoy = pd.read_excel(r"Hist√≥rico Mensal Engajamento.xlsx", sheet_name = "2021")
        df_2021_yoy = df_2021_yoy[df_2021_yoy["M√™s"].isin(meses)]
        return df_2021_yoy  

    @st.cache_data
    def importar_yoy_2020():
        df_2020_yoy = pd.read_excel(r"Hist√≥rico Mensal Engajamento.xlsx", sheet_name = "2020")
        df_2020_yoy = df_2020_yoy[(df_2020_yoy["M√™s"].isin(meses)) & (df_2020_yoy['Status'] == "ATIVO")]
        return df_2020_yoy  
    
    df_2022_yoy = importar_yoy_2022()
    df_2021_yoy = importar_yoy_2021()
    df_2020_yoy = importar_yoy_2020()
    
    #importando tabelas fato auxiliares
    @st.cache_data
    def importar_olimp():
        df_olimp = pd.read_excel(r"Olimpiadas_Tratado.xlsx")
        return df_olimp
    
    @st.cache_data
    def importar_olimp_teste():
        df_olimp_teste = pd.read_excel(r"teste_olimpiadas.xlsx")
        return df_olimp_teste

    @st.cache_data
    def importar_tutoria():
        df_quinzenal = pd.read_excel(r"Acompanhamento Tutoria_Tratado.xlsx")
        return df_quinzenal

    ###### AJUSTAR DAQUI PARA BAIXO ######

    df_olimp = importar_olimp()
    df_olimp_teste = importar_olimp_teste()
    df_quinzenal = importar_tutoria()

    #merge com as tabelas fato
    olimp_merge = df_olimp.drop_duplicates(subset=['ID'])
    olimp_merge = olimp_merge.drop(columns = ['M√™s','Data','S√©rie','Nome', 'Olimp√≠ada', 'Status da Inscri√ß√£o','Status'])

    data_frames = [df_dash360, olimp_merge]
    df_dash360 = reduce(lambda  left,right: pd.merge(left,right,on=['ID'],how='outer'), data_frames)

    #gerando dois dataframes
    #um (principal) apenas com os alunos ativos
    df_dash360_ativo = df_dash360[df_dash360['Status'] == "ATIVO"]

    #um com todos os alunos (a fim de verificar o aumento de desligados etc)
    df_dash360_total = df_dash360

    #gerando os filtros
    #serie = st.sidebar.multiselect(
    #    "Selecione a s√©rie:",
    #    options=df_dash360_ativo['Serie'].dropna().unique(),
    #    default=df_dash360_ativo['Serie'].dropna().unique()
    #    )

    #tutor pode desfiltrar
    desfiltrartutor=st.sidebar.button("Desfiltrar Tutor")
    if desfiltrartutor:
        tutor=st.sidebar.multiselect(
            "Selecione o tutor:",
            options=df_dash360_ativo['Tutor'].dropna(),
            default=df_dash360_ativo['Tutor'].dropna().unique()
            )
    else:
        tutor = st.sidebar.multiselect(
            "Selecione o tutor:",
            options=df_dash360_ativo['Tutor'].dropna().unique(),
            default=df_dash360_ativo['Tutor'].dropna().unique()
            )

    tipo = st.sidebar.multiselect(
        "Selecione o tipo:",
        options=df_dash360_ativo['Tipo'].dropna().unique(),
        default=df_dash360_ativo['Tipo'].dropna().unique()
        )

    praca = st.sidebar.multiselect(
        "Selecione a Pra√ßa:",
        options=df_dash360_ativo['Pra√ßa'].dropna().unique(),
        default=df_dash360_ativo['Pra√ßa'].dropna().unique()
        )


    #base com filtros que ser√° usada nos gr√°ficos
    df_selection = df_dash360_ativo.query("Tipo == @tipo & Pra√ßa == @praca & Tutor == @tutor")
    df_selection_total = df_dash360_total.query("Tipo == @tipo & Pra√ßa == @praca & Tutor == @tutor") #esse df √© para o gr√°fico de status
    df_dash2022 = df_dash2022.query("Tipo == @tipo & Pra√ßa == @praca & Tutor == @tutor") #[[AJUSTAR]]
    df_selection_olimp_teste =  df_olimp_teste.query("Tipo == @tipo & Pra√ßa == @praca & Tutor == @tutor")

    #T√≠tulo
    st.title("Dash 360 Ismart Online 2023")
    st.markdown("##")

    #N√∫mero total de alunos ativos
    total_alunos = int(df_selection['ID'].count())

    #Forma√ß√£o em 2023 = m√©dia das presen√ßas nas forma√ß√µes
    form_1 = (1651/2336)*100
    form_2 = (1098/1553)*100
    form_3 = float('Nan')
    form_4 = float('Nan')

    forms = [form_1,form_2,form_3,form_4] #lista de todas as forma√ß√µes

    presenca_form = np.nanmean(forms) #m√©dia das presen√ßas

    #para engajamento em MA e LI, contabilizamos apenas os alunos n√£o dispensados
    df_meta_acad = df_selection[df_selection['√â liberado de Matem√°tica ou Linguagens?'] == 'N√£o dispensado']

    ##se todos os alunos filtrados forem dispensados, precisa de fazer uma conta da f√≥rmula que n√£o conte MA e LI
    if df_meta_acad[df_meta_acad['ALUNO ALTO ENGAJ MA?'] == 'SIM'].empty:
        #Porcentagem de alunos mais de 60% engajamento
        alto_engaj_miss = ((df_selection[df_selection['ALUNO ALTO ENGAJ MISS√ÉO?'] == 'SIM']['cont'].sum()/df_selection['cont'].sum())*100)
        alto_engaj_red = ((df_selection[df_selection['ALUNO ALTO ENGAJ RED?'] == 'SIM']['cont'].sum()/df_selection['cont'].sum())*100)

        #agregando todos os valores
        engaj = [alto_engaj_red,alto_engaj_miss,presenca_form]
        alto_engaj = round(np.mean(engaj),1)
    else:
        #Porcentagem de alunos mais de 60% engajamento
        alto_engaj_ma = ((df_meta_acad[df_meta_acad['ALUNO ALTO ENGAJ MA?'] == 'SIM']['cont'].sum()/df_meta_acad['cont'].sum())*100)
        alto_engaj_li = ((df_meta_acad[df_meta_acad['ALUNO ALTO ENGAJ LI?'] == 'SIM']['cont'].sum()/df_meta_acad['cont'].sum())*100)
        alto_engaj_miss = ((df_selection[df_selection['ALUNO ALTO ENGAJ MISS√ÉO?'] == 'SIM']['cont'].sum()/df_selection['cont'].sum())*100)
        alto_engaj_red = ((df_selection[df_selection['ALUNO ALTO ENGAJ RED?'] == 'SIM']['cont'].sum()/df_selection['cont'].sum())*100)

        #agregando todos os valores
        engaj = [alto_engaj_li,alto_engaj_ma,alto_engaj_red,alto_engaj_miss,presenca_form]
        alto_engaj = round(np.mean(engaj),1)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(label="Alunos ativos", value = total_alunos, help = 'Alunos transferidos para o presencial j√° foram retirados da base')
    with col2:
        st.metric(label="Engajamento Opera√ß√µes", value = alto_engaj, help = 'M√©dia entre alto engajamento em Matem√°tica, Linguagens, Miss√µes, Reda√ß√£o e a Presen√ßa em Forma√ß√µes')
    #with col3:
        #st.metric(label="Engajamento AT", value = alto_engaj_at, help = 'M√©dia entre alto engajamento em Matem√°tica, Linguagens e Reda√ß√£o')
    st.markdown("---")

    ##Gr√°ficos
    template_dash = "plotly_white"
    bg_color_dash = "rgba(0,0,0,0)"
    #cores nessa ordem: Rosa choque; Amarelo; Azul escuro; verdinho; azul normal; salm√£o; verdinho escuro; Azul clarinho; laranja claro;
    colors = ['#EE2D67','#EBEA70','#002561','#8EC6B2','#008ED4','#F2665E', '#55AA8C','#C4ECFF','#FCBD7D']    
    
    ##Status dos alunos
    fig_status = px.pie(
            df_selection_total,
            values = df_selection_total['Status'].value_counts().sort_index().dropna().values, ##INSERIDO O ".VALUES" NO FINAL - 03/05 - GABRIEL LIMA
            names = pd.unique(df_selection_total['Status'].dropna().sort_values()),
            title ='<b> STATUS </b>',
            color = pd.unique(df_selection_total['Status'].dropna().sort_values()),
            color_discrete_map = {'DESLIGADO':'#EE2D67','AFASTADO':'#EBEA70','TRANSFERIDO':'#002561','ATIVO':'#8EC6B2'},
            hole = .4,
            width = 500, height = 500
            )
    fig_status.update_traces(textposition='auto',
                            texttemplate="%{percent:.0%} %{label}",
                            showlegend=False,
                            textfont_size=15
                            )
    fig_status.update_layout(uniformtext_minsize=12,
                            title={
                                'text': "<b> STATUS </b>",
                                'y':0.9,
                                'x':0.5,
                                'xanchor': 'center',
                                'yanchor': 'top'}
                            )

    ##Quantidade de alunos por s√©rie
    quant_serie = df_selection.groupby(by=['Serie']).size().reset_index()
    quant_serie['quantidade'] = quant_serie.loc[:,0]

    fig_quant_serie = px.bar(
        quant_serie,
        x="Serie",
        y='quantidade',
        text = 'quantidade',
        color = "Serie",
        category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
        template = template_dash,
        color_discrete_sequence=colors
    )

    fig_quant_serie.update_layout(
        showlegend=False,
        xaxis_title="S√©rie",
        yaxis_title="# Quantidade",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> # ESTUDANTES POR S√âRIE </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )

    fig_quant_serie.update_yaxes(visible=False, showticklabels=False)

    ##Quantidade de pra√ßa por serie

    quant_praca = df_selection.groupby(by=['Pra√ßa','Serie']).size().reset_index()
    quant_praca['quantidade'] = quant_praca.loc[:,0]

    fig_quant_praca = px.bar(
        quant_praca,
        x="Pra√ßa",
        y="quantidade",
        text = "quantidade",
        color = "Serie",
        color_discrete_sequence = colors,
        template = template_dash,
        barmode='stack'
    )

    fig_quant_praca.update_traces(texttemplate='%{y}',
                                textposition='inside',
                                #textfont_size=11,
                                textangle=0,
                                insidetextanchor = 'middle'
                                )

    fig_quant_praca.update_xaxes(tickfont=dict(size=11))

    fig_quant_praca.update_yaxes(visible=False)

    fig_quant_praca.update_layout(legend=dict(
        yanchor="top",
        y=1.11,
        xanchor="right",
        x=0.20),
        font=dict(size=12)
        )

    #Configurando a soma no topo do gr√°fico
    quant_praca_sum = quant_praca.groupby('Pra√ßa').sum()

    fig_quant_praca.add_trace(go.Scatter(
        x=quant_praca_sum.index,
        y=quant_praca_sum['quantidade'],
        text=quant_praca_sum['quantidade'],
        mode='text',
        textposition='top center',
        textfont=dict(size=14),
        showlegend=False
    ))

    fig_quant_praca.update_layout(
        yaxis_title="# Quantidade",
        xaxis_title="Pra√ßa",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> # PRA√áA POR S√âRIE </b>",
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )

    ##Porcentagem de Tipos por S√©rie

    tipo_serie = df_selection.groupby(by=['Serie','Tipo']).size().reset_index()
    tipo_serie['percent']=df_selection.groupby(by=['Serie','Tipo']).size ().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    tipo_serie['percent']=round(tipo_serie['percent']).astype(int)
    tipo_serie['quantidade'] = tipo_serie.loc[:,0]
    tipo_serie = pd.DataFrame(tipo_serie)

    #Ordenar s√©rie e tipo
    order_serie = df_selection[['ordem_serie','Serie']].groupby(by=['ordem_serie','Serie']).mean().reset_index() #LIMITEI O DF_SELECTION EM [['ORDEM_SERIE','SERIE']] PARA N√ÉO FAZER O MEAN EM OUTRAS COLUNAS - 03/05 - GABRIEL LIMA
    order_serie = order_serie[['ordem_serie','Serie']]
    order_serie = pd.DataFrame(order_serie)

    #mesclando as duas
    tipo_serie = tipo_serie.merge(order_serie, left_on='Serie', right_on='Serie')
    tipo_serie = tipo_serie.sort_values(by=['ordem_serie'])

    fig_tipo_serie = px.bar(
        tipo_serie,
        x="Serie",
        y="percent",
        text = "percent",
        color = "Tipo",
        color_discrete_map = {'EAD':'#8EC6B2','MO':'#008ED4','EPP':'#002561'},
        category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
        template = template_dash,
        hover_name="Tipo",
        custom_data = ['quantidade'],
        orientation='v'
    )

    fig_tipo_serie.update_traces(texttemplate='%{y}%',
                                textposition='inside',
                                textfont_size=11,
                                textangle=0,
                                insidetextanchor = 'middle',
                                hovertemplate='Percentual da S√©rie = %{y}% <br>Quantidade de alunos = %{customdata} <br>')

    fig_tipo_serie.update_yaxes(visible=False)

    fig_tipo_serie.update_layout(
        yaxis_title="% Porcentagem",
        xaxis_title="S√©rie",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % TIPO POR S√âRIE </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )

    ## Porcentagem de Clusteriza√ß√£o por ano

    #2023
    cluster_hj = pd.DataFrame(df_selection['CLUSTER ENGAJAMENTO'].value_counts(normalize=True)*100).reset_index().round()
    #cluster_hj = cluster_hj.rename(columns={"index": "CLUSTER ENGAJAMENTO", "CLUSTER ENGAJAMENTO": ano_hoje})
    cluster_hj = cluster_hj.rename(columns={"proportion": ano_hoje}) #RENOMEANDO CORRETAMENTE A COLUNA - 03/05 - GABRIEL LIMA
    cluster_hj[ano_hoje] = round(cluster_hj[ano_hoje]).astype(int)

    #2022
    cluster_2022 = pd.DataFrame(df_2022['CLUSTER ENGAJAMENTO'].value_counts(normalize=True)*100).reset_index().round()
    #cluster_2022 = cluster_2022.rename(columns={"index": "CLUSTER ENGAJAMENTO", "CLUSTER ENGAJAMENTO": "2022"})
    cluster_2022 = cluster_2022.rename(columns={"proportion": "2022"}) #RENOMEANDO CORRETAMENTE A COLUNA - 03/05 - GABRIEL LIMA
    cluster_2022["2022"] = round(cluster_2022["2022"]).astype(int)

    #2021
    cluster_2021 = pd.DataFrame(df_2021['CLUSTER ENGAJAMENTO'].value_counts(normalize=True)*100).reset_index().round()
    #cluster_2021 = cluster_2021.rename(columns={"index": "CLUSTER ENGAJAMENTO", "CLUSTER ENGAJAMENTO": "2021"})
    cluster_2021 = cluster_2021.rename(columns={"proportion": "2021"}) #RENOMEANDO CORRETAMENTE A COLUNA - 03/05 - GABRIEL LIMA
    cluster_2021["2021"] = round(cluster_2021["2021"]).astype(int)

    #2020
    cluster_2020 = pd.DataFrame(df_2020['CLUSTER ENGAJAMENTO'].value_counts(normalize=True)*100).reset_index().round()
    #cluster_2020 = cluster_2020.rename(columns={"index": "CLUSTER ENGAJAMENTO", "CLUSTER ENGAJAMENTO": "2020"})
    cluster_2020 = cluster_2020.rename(columns={"proportion": "2020"}) #RENOMEANDO CORRETAMENTE A COLUNA - 03/05 - GABRIEL LIMA
    cluster_2020["2020"] = round(cluster_2020["2020"]).astype(int)
    
    #juntando todas as tabelas
    data_frames = [cluster_hj, cluster_2021, cluster_2020, cluster_2022]
    cluster_ano = reduce(lambda  left,right: pd.merge(left,right,on=['CLUSTER ENGAJAMENTO'],how='outer'), data_frames)

    #pivotando e alterando a ordem
    cluster_ano = pd.melt(cluster_ano,id_vars=['CLUSTER ENGAJAMENTO'],value_vars=cluster_ano.columns.to_list(), var_name='Ano', value_name='percent')
    cluster_ano = cluster_ano.sort_values(by=['Ano'], ascending = True)

    #gr√°fico
    fig_cluster_ano = px.bar(
        cluster_ano,
        y="Ano",
        x="percent",
        text = "percent",
        color = 'CLUSTER ENGAJAMENTO',
        color_discrete_map = {'Desligar':'#EE2D67','Intervir':'#EBEA70','Orientar':'#002561','Desafiar':'#8EC6B2'},
        category_orders={'Ano':['2020','2021','2022','2023']},
        template = template_dash,
        orientation='h'
    )

    fig_cluster_ano.update_traces(texttemplate='%{x}%', textposition='inside',textfont_size=11, textangle=0, insidetextanchor = 'middle')

    fig_cluster_ano.update_layout(
        xaxis_title="% Porcentagem",
        yaxis_title="Ano",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % CLUSTER POR ANO YOY* </b>",
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.35,
            xanchor="right",
            x=0.75
        )
    )

    ##Porcentagem de Clusteriza√ß√£o por S√©rie

    cluster_serie = df_selection.groupby(by=['Serie','CLUSTER ENGAJAMENTO']).size().reset_index()
    cluster_serie['percent']=df_selection.groupby(by=['Serie','CLUSTER ENGAJAMENTO']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    cluster_serie['percent']=round(cluster_serie['percent']).astype(int)

    fig_cluster_serie = px.bar(
        cluster_serie,
        y="Serie",
        x="percent",
        text = "percent",
        color = 'CLUSTER ENGAJAMENTO',
        color_discrete_map = {'Desligar':'#EE2D67','Intervir':'#EBEA70','Orientar':'#002561','Desafiar':'#8EC6B2'},
        category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
        orientation='h',
        template = template_dash
    )

    fig_cluster_serie.update_traces(texttemplate='%{x}%', textposition='inside',textfont_size=11, textangle=0, insidetextanchor = 'middle')

    fig_cluster_serie.update_layout(
        xaxis_title="% Porcentagem",
        yaxis_title="S√©rie",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % CLUSTER POR S√âRIE </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.35,
            xanchor="right",
            x=1
        )
    )

    ##Porcentagem de Clusteriza√ß√£o por Pra√ßa

    cluster_praca = df_selection.groupby(by=['Pra√ßa','CLUSTER ENGAJAMENTO']).size().reset_index()
    cluster_praca['percent'] = df_selection.groupby(by=['Pra√ßa','CLUSTER ENGAJAMENTO']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    cluster_praca['percent'] = round(cluster_praca['percent']).astype(int)

    fig_cluster_praca = px.bar(
            cluster_praca,
            x='percent',
            y='Pra√ßa',
            color = 'CLUSTER ENGAJAMENTO',
            color_discrete_map = {'Desligar':'#EE2D67','Intervir':'#EBEA70','Orientar':'#002561','Desafiar':'#8EC6B2'},
            text = 'percent',
            orientation = 'h',
            template = template_dash
    )

    fig_cluster_praca.update_traces(texttemplate='%{x}%', textposition='inside',
                                    insidetextanchor = 'middle', textfont_size=11, textangle=0)

    fig_cluster_praca.update_layout(
        xaxis_title="% Porcentagem",
        yaxis_title="Pra√ßa",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % CLUSTER POR PRA√áA </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.35,
            xanchor="right",
            x=1
        )
    )

    ##___ENGAJAMENTO ANO X ANO___##

    ## Engajamento ano por s√©rie

    #construindo o pivot table com todos os anos
    #ano corrente
    engajamento_60_hj = df_selection.groupby(by=['Serie','ALUNO ALTO ENGAJAMENTO?']).size().reset_index()
    engajamento_60_hj[ano_hoje]=df_selection.groupby(by=['Serie','ALUNO ALTO ENGAJAMENTO?']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_60_hj[ano_hoje]=round(engajamento_60_hj[ano_hoje]).astype(int)
    engajamento_60_hj = engajamento_60_hj[engajamento_60_hj['ALUNO ALTO ENGAJAMENTO?'] == "SIM"][["Serie",ano_hoje]]

    #2021
    engajamento_60_2021 = df_2021.groupby(by=['Serie','ALTO ENGAJAMENTO M√âDIA']).size().reset_index()
    engajamento_60_2021['2021']=df_2021.groupby(by=['Serie','ALTO ENGAJAMENTO M√âDIA']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_60_2021['2021']=round(engajamento_60_2021['2021']).astype(int)
    engajamento_60_2021 = engajamento_60_2021[engajamento_60_2021['ALTO ENGAJAMENTO M√âDIA'] == "SIM"][["Serie","2021"]]

    #2020
    engajamento_60_2020 = df_2020.groupby(by=['Serie','ALTO ENGAJAMENTO M√âDIA']).size().reset_index()
    engajamento_60_2020['2020']=df_2020.groupby(by=['Serie','ALTO ENGAJAMENTO M√âDIA']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_60_2020['2020']=round(engajamento_60_2020['2020']).astype(int)
    engajamento_60_2020 = engajamento_60_2020[engajamento_60_2020['ALTO ENGAJAMENTO M√âDIA'] == "SIM"][["Serie","2020"]]

    #2022
    engajamento_60_2022 = df_2022.groupby(by=['Serie','ALTO ENGAJAMENTO M√âDIA']).size().reset_index()
    engajamento_60_2022['2022']=df_2022.groupby(by=['Serie','ALTO ENGAJAMENTO M√âDIA']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_60_2022['2022']=round(engajamento_60_2022['2022']).astype(int)
    engajamento_60_2022 = engajamento_60_2022[engajamento_60_2022['ALTO ENGAJAMENTO M√âDIA'] == "SIM"][["Serie","2022"]]

    #juntando todas as tabelas
    data_frames = [engajamento_60_hj, engajamento_60_2021, engajamento_60_2020,engajamento_60_2022]
    engaj_ano_serie = reduce(lambda  left,right: pd.merge(left,right,on=['Serie'],how='outer'), data_frames)

    #pivotando e alterando a ordem
    engaj_ano_serie = pd.melt(engaj_ano_serie,id_vars=['Serie'],value_vars=engaj_ano_serie.columns.to_list(), var_name='Ano', value_name='percent')
    engaj_ano_serie = engaj_ano_serie.sort_values(by=['Ano'], ascending = True)

    ## Engajamento ano por disciplina

    cols_ano = ['Linguagens','Matem√°tica','Miss√µes','Reda√ß√£o']
    cols_ano_dispensa = ['Miss√µes','Reda√ß√£o']

    if df_selection[df_selection['√â liberado de Matem√°tica ou Linguagens?'] == 'N√£o dispensado'].empty:
        #2023 - ano atual
        df_hj_caderno = df_selection[['ALUNO ALTO ENGAJ MISS√ÉO?',
                                    'ALUNO ALTO ENGAJ RED?']]
        df_hj_caderno = df_hj_caderno.rename(columns = {'ALUNO ALTO ENGAJ MISS√ÉO?':'Miss√µes',
                                                        'ALUNO ALTO ENGAJ RED?':'Reda√ß√£o'})
        df_hj_caderno = pd.melt(df_hj_caderno, value_vars=cols_ano_dispensa, var_name='Disciplina', value_name='Alto engajamento')
        df_hj_caderno = df_hj_caderno[df_hj_caderno['Alto engajamento'] !='-']
        engajamento_caderno_hj = df_hj_caderno.groupby(by=['Disciplina','Alto engajamento']).size().reset_index()
        engajamento_caderno_hj[ano_hoje] = df_hj_caderno.groupby(by=['Disciplina','Alto engajamento']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
        engajamento_caderno_hj[ano_hoje]=round(engajamento_caderno_hj[ano_hoje]).astype(int)
        engajamento_caderno_hj = engajamento_caderno_hj[engajamento_caderno_hj['Alto engajamento'] == "SIM"][['Disciplina',ano_hoje]]
        engajamento_caderno_hj.loc[len(engajamento_caderno_hj)] = {'Disciplina': 'Forma√ß√µes (M√©dia das presen√ßas)', '2023': round(presenca_form)} #inserindo a linha de forma√ß√µes que √© calculada diferente
        #c√°lculo do total de engajamento
        engajamento_caderno_hj_total = pd.DataFrame({'Disciplina':['Total'],
                                                    '2023':[round(alto_engaj)]}) #mesmo c√°lculo do n√∫mero na parte superior do dashonline
        frames_cad = [engajamento_caderno_hj_total,engajamento_caderno_hj]
        engajamento_caderno_hj = pd.concat(frames_cad)
    else:
        #2023 - ano atual
        df_hj_caderno = df_selection[['ALUNO ALTO ENGAJ LI?',
                                    'ALUNO ALTO ENGAJ MA?',
                                    'ALUNO ALTO ENGAJ MISS√ÉO?',
                                    'ALUNO ALTO ENGAJ RED?']]
        df_hj_caderno = df_hj_caderno.rename(columns = {'ALUNO ALTO ENGAJ LI?':'Linguagens',
                                                        'ALUNO ALTO ENGAJ MA?':'Matem√°tica',
                                                        'ALUNO ALTO ENGAJ MISS√ÉO?':'Miss√µes',
                                                        'ALUNO ALTO ENGAJ RED?':'Reda√ß√£o'})
        df_hj_caderno = pd.melt(df_hj_caderno, value_vars=cols_ano, var_name='Disciplina', value_name='Alto engajamento')
        df_hj_caderno = df_hj_caderno[df_hj_caderno['Alto engajamento'] !='-']
        engajamento_caderno_hj = df_hj_caderno.groupby(by=['Disciplina','Alto engajamento']).size().reset_index()
        engajamento_caderno_hj[ano_hoje] = df_hj_caderno.groupby(by=['Disciplina','Alto engajamento']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
        engajamento_caderno_hj[ano_hoje]=round(engajamento_caderno_hj[ano_hoje]).astype(int)
        engajamento_caderno_hj = engajamento_caderno_hj[engajamento_caderno_hj['Alto engajamento'] == "SIM"][['Disciplina',ano_hoje]]
        engajamento_caderno_hj.loc[len(engajamento_caderno_hj)] = {'Disciplina': 'Forma√ß√µes (M√©dia das presen√ßas)', '2023': round(presenca_form)} #inserindo a linha de forma√ß√µes que √© calculada diferente
        #c√°lculo do total de engajamento
        engajamento_caderno_hj_total = pd.DataFrame({'Disciplina':['Total'],
                                                    '2023':[round(alto_engaj)]}) #mesmo c√°lculo do n√∫mero na parte superior do dashonline
        frames_cad = [engajamento_caderno_hj_total,engajamento_caderno_hj]
        engajamento_caderno_hj = pd.concat(frames_cad)


    #2021
    df_2021_caderno = df_2021[cols_ano]
    df_2021_caderno = pd.melt(df_2021_caderno, value_vars=cols_ano, var_name='Disciplina', value_name='Alto engajamento')
    df_2021_caderno = df_2021_caderno[df_2021_caderno['Alto engajamento'] != "-"]
    engajamento_caderno_2021 = df_2021_caderno.groupby(by=['Disciplina','Alto engajamento']).size().reset_index()
    engajamento_caderno_2021['2021']=df_2021_caderno.groupby(by=['Disciplina','Alto engajamento']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_caderno_2021['2021']=round(engajamento_caderno_2021['2021']).astype(int)
    engajamento_caderno_2021 = engajamento_caderno_2021[engajamento_caderno_2021['Alto engajamento'] == "SIM"][['Disciplina',"2021"]]
    #c√°lculo do total de engajamento
    total = round(engajamento_caderno_2021['2021'].mean(axis=0))
    engajamento_caderno_2021_total = pd.DataFrame({'Disciplina':['Total'],
                                                '2021':[total]})
    #merge do total com as outras disciplinas
    frames_cad = [engajamento_caderno_2021_total,engajamento_caderno_2021]
    engajamento_caderno_2021 = pd.concat(frames_cad)

    #2020
    df_2020_caderno = df_2020[cols_ano]
    df_2020_caderno = pd.melt(df_2020_caderno, value_vars=cols_ano, var_name='Disciplina', value_name='Alto engajamento')
    df_2020_caderno = df_2020_caderno[df_2020_caderno['Alto engajamento'] != "-"]
    engajamento_caderno_2020 = df_2020_caderno.groupby(by=['Disciplina','Alto engajamento']).size().reset_index()
    engajamento_caderno_2020['2020']=df_2020_caderno.groupby(by=['Disciplina','Alto engajamento']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_caderno_2020['2020']=round(engajamento_caderno_2020['2020']).astype(int)
    engajamento_caderno_2020 = engajamento_caderno_2020[engajamento_caderno_2020['Alto engajamento'] == "SIM"][['Disciplina',"2020"]]
    #c√°lculo do total de engajamento
    total = round(engajamento_caderno_2020['2020'].mean(axis=0))
    engajamento_caderno_2020_total = pd.DataFrame({'Disciplina':['Total'],
                                                '2020':[total]})
    #merge do total com as outras disciplinas
    frames_cad = [engajamento_caderno_2020_total,engajamento_caderno_2020]
    engajamento_caderno_2020 = pd.concat(frames_cad)

    #2022
    df_2022_caderno = df_2022[cols_ano]
    df_2022_caderno = pd.melt(df_2022_caderno, value_vars=cols_ano, var_name='Disciplina', value_name='Alto engajamento')
    df_2022_caderno = df_2022_caderno[df_2022_caderno['Alto engajamento'] != "-"]
    engajamento_caderno_2022 = df_2022_caderno.groupby(by=['Disciplina','Alto engajamento']).size().reset_index()
    engajamento_caderno_2022['2022']=df_2022_caderno.groupby(by=['Disciplina','Alto engajamento']).size().groupby(level=0).apply(lambda x: 100 * x / float(x.sum())).values
    engajamento_caderno_2022['2022']=round(engajamento_caderno_2022['2022']).astype(int)
    engajamento_caderno_2022 = engajamento_caderno_2022[engajamento_caderno_2022['Alto engajamento'] == "SIM"][['Disciplina',"2022"]]
    #c√°lculo das forma√ß√µes: m√©dia das forma√ß√µes
    df_2022_form = round(np.nanmean(df_2022['Presen√ßa M√©dia'])*100) #LINHAS 711 E 712 COMENTADAS - 03/05 - GABRIEL LIMA
    engajamento_caderno_2022.loc[len(engajamento_caderno_2022)] = {'Disciplina': 'Forma√ß√µes (M√©dia das presen√ßas)', '2022': df_2022_form} #inserindo a linha de forma√ß√µes que √© calculada diferente

    #c√°lculo do total de engajamento
    total = round(engajamento_caderno_2022['2022'].mean(axis=0))
    engajamento_caderno_2022_total = pd.DataFrame({'Disciplina':['Total'],
                                                '2022':[total]})
    #merge do total com as outras disciplinas
    frames_cad = [engajamento_caderno_2022_total,engajamento_caderno_2022]
    engajamento_caderno_2022 = pd.concat(frames_cad)

    #juntando todas as tabelas
    data_frames = [engajamento_caderno_hj, engajamento_caderno_2021, engajamento_caderno_2020,engajamento_caderno_2022]
    engaj_ano_caderno = reduce(lambda  left,right: pd.merge(left,right,on=['Disciplina'],how='outer'), data_frames)

    #pivotando e alterando a ordem
    engaj_ano_caderno = pd.melt(engaj_ano_caderno,id_vars=['Disciplina'],value_vars=engaj_ano_caderno.columns.to_list(), var_name='Ano', value_name='percent')
    engaj_ano_caderno = engaj_ano_caderno.sort_values(by=['Ano'], ascending = True)

    #gr√°fico de engajamento por disciplina/caderno
    fig_engaj_ano_caderno = px.bar(
        engaj_ano_caderno,
        x="Disciplina",
        y="percent",
        text = "percent",
        color = "Ano",
        category_orders={'Disciplina':['Linguagens','Matem√°tica','Miss√µes','Reda√ß√£o','Forma√ß√µes (M√©dia das presen√ßas)','Total']},
        template = template_dash,
        color_discrete_sequence= colors,
        barmode='group'
    )

    fig_engaj_ano_caderno.update_layout(
        showlegend=True,
        xaxis_title="Disciplina",
        yaxis_title="% Porcentagem",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % ALUNOS ENGAJAMENTO ACIMA DE 60%: DISCIPLINA* </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )

    fig_engaj_ano_caderno.update_yaxes(visible=False)

    ##Engajamento m√™s a m√™s YoY [[AJUSTAR]]
    #atualmente est√° com o c√°lculo da meta de 2022, 2023 √© diferente


    #2022
    #engajamento por disciplina

    #abaixo para o c√°lculo de 2022, realiza-se a m√©dia de cada uma das disciplinas e depois a m√©dia entre todas as colunas
    def dataframe_meta(df,col):
        #retirar os dispensados
        df = df[(df[col] != '-') & (df['Status'] == 'ATIVO')]

        #pivot_table de alto engajamento
        pivot_table_col = pd.pivot_table(df,
                                        values = 'ID',
                                        index = 'M√™s',
                                        columns= col,
                                        aggfunc='count',
                                        margins=True,
                                        margins_name='Total').pipe(lambda d:(round(d.div(d['Total'], axis='index')*100,0)))

        pivot_table_col = pivot_table_col[['SIM']]
        pivot_table_col.rename(columns={'SIM': col},inplace = True)

        return pivot_table_col

    def join_diferentes_discip(df):
        engajamento_li = dataframe_meta(df,'Linguagens')
        engajamento_ma = dataframe_meta(df,'Matem√°tica')
        engajamento_miss = dataframe_meta(df,'Miss√µes')
        engajamento_red = dataframe_meta(df,'Reda√ß√£o')

        frames = [engajamento_li,engajamento_ma,engajamento_miss,engajamento_red]
        engajamento_meta = reduce(lambda  left,right: pd.merge(left,right,on=['M√™s'],how='outer'), frames)

        engajamento_meta['M√©dia Engajamento'] = round(engajamento_meta.mean(axis=1))

        return engajamento_meta

    engajamento_hist_22 = join_diferentes_discip(df_2022_yoy)[['M√©dia Engajamento']]
    engajamento_hist_22.rename(columns = {'M√©dia Engajamento':'2022'},inplace=True)

    engajamento_hist_21 = join_diferentes_discip(df_2021_yoy)[['M√©dia Engajamento']]
    engajamento_hist_21.rename(columns = {'M√©dia Engajamento':'2021'},inplace=True)

    engajamento_hist_20 = join_diferentes_discip(df_2020_yoy)[['M√©dia Engajamento']]
    engajamento_hist_20.rename(columns = {'M√©dia Engajamento':'2020'},inplace=True)

    #juntando todas as tabelas
    data_frames = [engajamento_hist_22, engajamento_hist_21, engajamento_hist_20]
    engaj_yoy = reduce(lambda  left,right: pd.merge(left,right,on=['M√™s'],how='outer'), data_frames)
    engaj_yoy = engaj_yoy.drop('Total').reset_index()

    #pivotando e alterando a ordem
    engaj_yoy = pd.melt(engaj_yoy,id_vars=['M√™s'],value_vars=engaj_yoy.columns.to_list(), var_name='Ano', value_name='percent')
    engaj_yoy = engaj_yoy.sort_values(by=['Ano'], ascending = True)

    #gr√°fico de engajamento por m√™s Yoy
    fig_engaj_yoy = px.bar(
        engaj_yoy,
        x="M√™s",
        y="percent",
        text = "percent",
        color = "Ano",
        category_orders={'M√™s':['Abril','Maio','Junho','Julho','Agosto', 'Setembro', 'Outubro', 'Novembro','Dezembro']},
        template = template_dash,
        color_discrete_map= {'2020':'#EBEA70','2021':'#002561', '2022':'#8EC6B2'},
        barmode='group'
    )

    fig_engaj_yoy.update_layout(
        showlegend=True,
        xaxis_title="M√™s",
        yaxis_title="% Porcentagem",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> M√âDIA DE ALTO ENGAJAMENTO: M√äS A M√äS* </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )

    fig_engaj_yoy.update_yaxes(visible=False)

    #### ----- Layout dos gr√°ficos na tela
    espaco1,espaco2=st.columns(2)
    #----- primeira  linha----
    col1,col2=st.columns(2)
    with col1:
        st.plotly_chart(fig_status, use_container_width=True)
    with col2:
        st.plotly_chart(fig_quant_serie,use_container_width=True)

    #----- segunda  linha----
    col1,col2=st.columns(2)
    with col1:
        st.plotly_chart(fig_quant_praca,use_container_width=True)
    with col2:
        st.plotly_chart(fig_tipo_serie,use_container_width=True)

    st.markdown("---")
    #t√≠tulo da pr√≥xima se√ß√£o de engajamento
    st.markdown("<h3 style= 'text-align: center'> Engajamento </h3>", unsafe_allow_html=True)

    #----- terceira linha -----
    container=st.container()
    with container:
        st.plotly_chart(fig_engaj_ano_caderno,use_container_width=True)

     #----- quarta linha -----
    container=st.container()
    with container:
        st.plotly_chart(fig_engaj_yoy,use_container_width=True)

    #----- quinta linha -----

    #slider com as disciplinas para selecionar
    if df_selection[df_selection['√â liberado de Matem√°tica ou Linguagens?'] == 'N√£o dispensado'].empty:
        slider = st.select_slider('Selecione a disciplina', options=['Miss√µes','Reda√ß√£o'])
    else:
        slider = st.select_slider('Selecione a disciplina', options=['Matem√°tica','Linguagens','Miss√µes','Reda√ß√£o'])
    if slider == 'Matem√°tica':
        disciplina = 'ALUNO ALTO ENGAJ MA?'
        meta_disciplina = 83
    elif slider == 'Linguagens':
        disciplina = 'ALUNO ALTO ENGAJ LI?'
        meta_disciplina = 83
    elif slider == 'Miss√µes':
        disciplina = 'ALUNO ALTO ENGAJ MISS√ÉO?'
        meta_disciplina = 83
    elif slider == 'Reda√ß√£o':
        disciplina = 'ALUNO ALTO ENGAJ RED?'
        meta_disciplina = 83

    #gr√°fico de engajamento por discplina por s√©rie
    #esse gr√°fico depende do input do slider, e, portanto, n√£o poderia ser codado antes do slider

    #2023
    engaj_discip_hj = df_selection.groupby(by=['Serie', disciplina]).size().reset_index()
    engaj_discip_hj = engaj_discip_hj[engaj_discip_hj[disciplina] != '-']
    engaj_discip_hj['quantidade'] = engaj_discip_hj.loc[:,0]
    pivot_discip_hj = pd.pivot_table(engaj_discip_hj,
                                    values = 'quantidade',
                                    index=['Serie'],
                                    columns=[disciplina],
                                    aggfunc='sum',
                                    margins=True,
                                    margins_name='Total').pipe(lambda d:(round(d.div(d['Total'], axis='index')*100,0)))

    pivot_discip_hj['percent']= pivot_discip_hj['SIM']
    pivot_discip_hj['Ano']= ano_hoje
    pivot_discip_hj = pivot_discip_hj[['percent','Ano']].reset_index()

    #2022
    engaj_discip_22 = df_2022.groupby(by=['Serie', slider]).size().reset_index()
    engaj_discip_22 = engaj_discip_22[engaj_discip_22[slider] != '-']
    engaj_discip_22['quantidade'] = engaj_discip_22.loc[:,0]
    pivot_discip_22 = pd.pivot_table(engaj_discip_22,
                                    values = 'quantidade',
                                    index=['Serie'],
                                    columns=[slider],
                                    aggfunc='sum',
                                    margins=True,
                                    margins_name='Total').pipe(lambda d:(round(d.div(d['Total'], axis='index')*100,0)))
    pivot_discip_22['percent']= pivot_discip_22['SIM']
    pivot_discip_22['Ano']= '2022'
    pivot_discip_22 = pivot_discip_22[['percent','Ano']].reset_index()

    #merge 22 e 23
    frames_discp = [pivot_discip_22, pivot_discip_hj]
    engaj_discip = pd.concat(frames_discp)
    engaj_discip.sort_values(by=['Ano'], ascending = True, inplace = True)

    fig_engaj_discip = px.bar(
        engaj_discip,
        x='percent',
        y='Serie',
        text = 'percent',
        color = 'Ano',
        category_orders={'Serie':['Total','8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
        orientation = 'h',
        color_discrete_map= {'2022':'#EBEA70', '2023': '#EE2D67'},
        template = template_dash,
        barmode='group'
    )
    
    fig_engaj_discip.update_layout(
        xaxis_title="% Porcentagem",
        yaxis_title="S√©rie",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % ALUNOS ENGAJAMENTO ACIMA DE 60%: "+slider+"* </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        legend={'traceorder': 'reversed'}
    )

    texto_meta = 'Ideal = '+ str(meta_disciplina)

    fig_engaj_discip.update_xaxes(visible=False, showticklabels=False, range=[0, 100])
    fig_engaj_discip.add_vline(x=meta_disciplina,annotation_text=texto_meta)
    st.plotly_chart(fig_engaj_discip,use_container_width=True)
    st.write("*As informa√ß√µes anteriores a 2023 n√£o se alteram com o filtro de Tutores")

    #YoY da presen√ßa nas forma√ß√µes

    cols_form = ['Presen√ßa 1¬™F','Presen√ßa 2¬™F','Presen√ßa 3¬™F','Presen√ßa 4¬™F','M√©dia Forma√ß√µes']

    #2022
    formacao_22 = pd.DataFrame(data = {'Forma√ß√µes': cols_form,
                        '2022': [70,62,64,61,64]})

    #2023calculando a forma√ß√£o do ano atual
    formacoes = [form_1,form_2,form_3,form_4,presenca_form]
    np_array = np.array(formacoes) #arredondar a lista de presenca nas forma√ß√µes
    np_round_to_tenths = np.around(np_array, 0)
    formacoes_arredondado = list(np_round_to_tenths)
    #montando tabela 2023
    formacao_hj = pd.DataFrame(data = {'Forma√ß√µes': cols_form,
                        '2023': formacoes_arredondado})

    #merge 22 e 23
    formacao_hist= formacao_22.merge(formacao_hj, left_on='Forma√ß√µes', right_on='Forma√ß√µes')

    formacao_hist = pd.melt(formacao_hist,id_vars=['Forma√ß√µes'],value_vars=[ano_hoje,'2022'], var_name='Ano', value_name='Presen√ßa')
    formacao_hist = formacao_hist.sort_values(by=['Ano'], ascending = True)

    #gr√°fico de forma√ß√µes
    fig_formacao_hist = px.bar(
        formacao_hist,
        x="Forma√ß√µes",
        y="Presen√ßa",
        text = "Presen√ßa",
        color = "Ano",
        category_orders={'Forma√ß√µes':cols_form},
        template = template_dash,
        color_discrete_map= {'2019':'#EE2D67', '2023':'#8EC6B2'},
        color_discrete_sequence= colors,
        barmode='group'
    )

    fig_formacao_hist.update_layout(
        showlegend=True,
        xaxis_title="Forma√ß√µes",
        yaxis_title="Presen√ßa",
        plot_bgcolor=bg_color_dash,
        title={
            'text': "<b> % PRESEN√áA NAS FORMA√á√ïES (C√ÅLCULO DA META)** </b>",
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )

    fig_formacao_hist.update_traces(texttemplate='%{y}%', textposition='inside',textfont_size=15)

    fig_formacao_hist.update_yaxes(visible=False)
    
    st.plotly_chart(fig_formacao_hist,use_container_width=True)
    st.write("**Meta de forma√ß√µes = % de presen√ßa dos alunos nas forma√ß√µes na √©poca das forma√ß√µes.")

    #----- sexta linha----
    st.plotly_chart(fig_cluster_ano, use_container_width=True)
    st.write("*As informa√ß√µes anteriores a 2023 n√£o se alteram com o filtro de Tutores")

    #----- s√©tima linha---
    col1,col2=st.columns(2)
    with col1:
        st.plotly_chart(fig_cluster_serie, use_container_width=True)
    with col2:
        st.plotly_chart(fig_cluster_praca,use_container_width=True)

    #inserir tab de engajamento geral a posteriori
    ####### TABS
    tab1,tab2, tab3,tab4,tab5= st.tabs(['Prova √önica','Teste Olimpiadas','Olimp√≠adas','Acompanhamento Quinzenal', 'Khan Academy' ])
    with tab1:
        col1,col2=st.columns(2,gap='small')
        with col1:
            pu_boxplot = df_dash2022[['Serie',' M√âDIA ENEM PROJETADO',' M√âDIA ENEM PROJETADO PU 2']].round()

            fig_pu1_boxplot = px.box(
                pu_boxplot,
                x="Serie",
                y=' M√âDIA ENEM PROJETADO',
                category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
                template = template_dash,
                color_discrete_sequence= ['#002561']
            )

            fig_pu1_boxplot.update_layout(
                xaxis_title="S√©rie",
                yaxis_title="M√©dia ENEM Projetado",
                plot_bgcolor=bg_color_dash,
                title={
                    'text': "<b> DISTRIBUI√á√ÉO ENEM PROJETADA PU 1 </b>",
                    'y':0.9,
                    'x':0.5,
                    'xanchor': 'center',
                    'yanchor': 'top'
                }
            )

            fig_pu1_boxplot.update_yaxes(range=[100, 900])

            fig_pu1_boxplot.update_traces(boxmean = True)

            st.plotly_chart(fig_pu1_boxplot,use_container_width=True)

        with col2:
            fig_pu2_boxplot = px.box(
                pu_boxplot,
                x="Serie",
                y=' M√âDIA ENEM PROJETADO PU 2',
                category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
                template = template_dash,
                color_discrete_sequence= ['#8EC6B2']
            )

            fig_pu2_boxplot.update_layout(
                xaxis_title="S√©rie",
                yaxis_title="M√©dia ENEM Projetado",
                plot_bgcolor=bg_color_dash,
                title={
                    'text': "<b> DISTRIBUI√á√ÉO ENEM PROJETADA PU 2 </b>",
                    'y':0.9,
                    'x':0.5,
                    'xanchor': 'center',
                    'yanchor': 'top'
                }
            )

            fig_pu2_boxplot.update_traces(boxmean = True)

            fig_pu2_boxplot.update_yaxes(range=[100, 900])

            st.plotly_chart(fig_pu2_boxplot,use_container_width=True)
        ##----- segunda linha -----
        #gr√°fico de m√©dias da PU ano a ano
        #imputando os valores de 2021
        notas = {'Serie': ['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM'],
                        '2021 PU 1': [577,622,666,672,673],
                        '2021 PU 2': [610.0853187,613.8771636,659.3912762,661.5257525,647.1816498]
                        }

        notas_pu_2021 = pd.DataFrame(data=notas).round()

        #calculando 2022

        media_2022 = df_dash2022[['Serie',' M√âDIA ENEM PROJETADO',' M√âDIA ENEM PROJETADO PU 2']].groupby(by=['Serie']).mean().reset_index() #LIMITANDO O DF_DASH2022 PARA SERIE, MEDIA ENEM PROJETADO E MEDIA ENEM PROJETADO PU 2 - 03/05 - GABRIEL LIMA
        pu_2022_enemp = media_2022[['Serie',' M√âDIA ENEM PROJETADO',' M√âDIA ENEM PROJETADO PU 2']].round()
        pu_2022_enemp = pu_2022_enemp.rename(columns = {' M√âDIA ENEM PROJETADO': '2022 PU 1',
                                        ' M√âDIA ENEM PROJETADO PU 2':'2022 PU 2'})
        pus = [pu_2022_enemp, notas_pu_2021]
        pu_enemp = reduce(lambda left,right: pd.merge(left,right,on=['Serie'],how='outer'), pus)

        #pivotando e alterando a ordem
        pu_enemp = pd.melt(pu_enemp,id_vars=['Serie'],value_vars=pu_enemp.columns.tolist(), var_name='PU', value_name='M√©dia ENEM Projetado')
        pu_enemp = pu_enemp.sort_values(by=['PU'], ascending = True)

        #Separando PU 1 e PU 2
        pu_1_enemp = pu_enemp[(pu_enemp['PU'] == "2021 PU 1") | (pu_enemp['PU'] == "2022 PU 1")]

        #gr√°fico PU 1
        fig_pu_1_enemp = px.bar(
            pu_1_enemp,
            x="Serie",
            y="M√©dia ENEM Projetado",
            text = "M√©dia ENEM Projetado",
            color = "PU",
            category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
            template = template_dash,
            color_discrete_map={'2021 PU 1':'#002561', '2022 PU 1':'#8EC6B2'},
            barmode='group'
        )

        fig_pu_1_enemp.update_layout(
            showlegend=True,
            xaxis_title="S√©rie",
            yaxis_title="M√©dia ENEM Projetado",
            plot_bgcolor=bg_color_dash,
            title={
                'text': "<b> M√âDIA ENEM PROJETADA YoY - PU 1 2022</b>",
                'y':0.9,
                'x':0.5,
                'xanchor': 'center',
                'yanchor': 'top'
            }
        )

        fig_pu_1_enemp.update_yaxes(visible=False)

        st.plotly_chart(fig_pu_1_enemp,use_container_width=True)

        #df PU 2
        pu_2_enemp = pu_enemp[(pu_enemp['PU'] == "2021 PU 2") | (pu_enemp['PU'] == "2022 PU 2")]

        #gr√°fico PU 2
        fig_pu_2_enemp = px.bar(
            pu_2_enemp,
            x="Serie",
            y="M√©dia ENEM Projetado",
            text = "M√©dia ENEM Projetado",
            color = "PU",
            category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
            template = template_dash,
            color_discrete_map={'2021 PU 2':'#002561', '2022 PU 2':'#8EC6B2'},
            barmode='group'
        )

        fig_pu_2_enemp.update_layout(
            showlegend=True,
            xaxis_title="S√©rie",
            yaxis_title="M√©dia ENEM Projetado",
            plot_bgcolor=bg_color_dash,
            title={
                'text': "<b> M√âDIA ENEM PROJETADA YoY - PU 2 2022 </b>",
                'y':0.9,
                'x':0.5,
                'xanchor': 'center',
                'yanchor': 'top'
            }
        )

        fig_pu_2_enemp.update_yaxes(visible=False)

        st.plotly_chart(fig_pu_2_enemp,use_container_width=True)
    with tab2:
        st.write('Por padr√£o os dados abaixo consideram o ano de 2022 e 2023, caso queira analisar cada ano espec√≠ficamente basta fazer o filtro abaixo.')
        st.write('Vale ressaltar que quanto aos dados de 2022 estamos falando de alunos ativos na √©poca, ou seja vai aparecer dados de alunos ativos em dezembro de 2022 que foram desligados durante 2023 por exemplo.')

        col1,espaco1,col2 = st.columns([1,1,1])

        medalhistas_unicos = df_selection_olimp_teste[(df_selection_olimp_teste['Medalhas acad√™micas'] != "")]
        medalhistas_unicos = medalhistas_unicos.drop_duplicates(['ID'])


        tabela_medalhistas_serie=  medalhistas_unicos.groupby('Selecione a sua s√©rie:')['Ano'].value_counts().unstack(fill_value=0)
        tabela_medalhistas_serie = tabela_medalhistas_serie.rename_axis(None, axis=1)
        tabela_medalhistas_serie = tabela_medalhistas_serie.reset_index()

        fig_olimp_medalhistas = px.bar(
            tabela_medalhistas_serie,
            x='Selecione a sua s√©rie:', 
            y=[2022, 2023],     
            color_discrete_map= {'2022':'#EE2D67', '2023':'#8EC6B2'},
            barmode='group',
            category_orders={'Selecione a sua s√©rie:':cols_form},
            template = template_dash)

        fig_olimp_medalhistas.update_layout(
            showlegend=True,
            xaxis_title="S√©rie",
            yaxis_title="Medalhistas",
            plot_bgcolor=bg_color_dash,
            title={
                'text': "<b> QUANTIDADE DE ALUNOS MEDALHISTAS POR S√âRIE EM CADA ANO </b>",
                'y':0.9,
                'x':0.5,
                'xanchor': 'center',
                'yanchor': 'top'
            }
        )

        fig_olimp_medalhistas.update_yaxes(visible=False)

        st.plotly_chart(fig_olimp_medalhistas,use_container_width=True)

    with tab3:

        df_alunos_medalhas = df_selection.loc[(df_selection['Me inscrevi e estou aguardando resultados'].notnull() & (df_selection['Me inscrevi e estou aguardando resultados'] != 0)& (df_selection['Me inscrevi e estou aguardando resultados'] != "-")) 
                                              | (df_selection['Medalhas acad√™micas'].notnull() & (df_selection['Medalhas acad√™micas'] != "0") & (df_selection['Medalhas acad√™micas'] != "-"))]

        alunos_medalhas = df_alunos_medalhas.groupby(by=['Serie']).size().reset_index()
        alunos_medalhas['quantidade'] = alunos_medalhas.loc[:,0]
        alunos_medalhas = pd.DataFrame(alunos_medalhas)

        #contando quantos alunos ativos tem por s√©rie
        cont_alunos = df_dash360_ativo.groupby(by=['Serie']).count()['ID']
        cont_alunos = pd.DataFrame(cont_alunos)

        #ordenar as s√©ries
        order_serie = df_selection[['ordem_serie','Serie']].groupby(by=['ordem_serie','Serie']).mean().reset_index() #limitando o df_selection a ordem serie e serie - 03/05 - GABRIEL LIMA
        order_serie = order_serie[['ordem_serie','Serie']]

        #mesclando as duas tabelas para fazer a coluna % S√©rie
        medalhas_serie_unique = alunos_medalhas.merge(cont_alunos, left_on='Serie', right_on='Serie')
        medalhas_serie_unique = medalhas_serie_unique.merge(order_serie, left_on='Serie', right_on='Serie')
        medalhas_serie_unique['% Serie'] = ((medalhas_serie_unique['quantidade']/medalhas_serie_unique['ID'])*100).round().astype(int)
        medalhas_serie_unique = medalhas_serie_unique.sort_values(by=['ordem_serie'])

        # st metric d e
        col1,col2=st.columns(2,gap='small')
        ### segunda linha
        with col1:
            st.metric(label="Total de estudantes com alguma medalha ou inscri√ß√£o",
                    value=str(sum(medalhas_serie_unique['quantidade'])),
                    help = "Estudantes √∫nicos com pelo menos uma medalha e/ou inscri√ß√£o")


            fig_medalhas_serie_unique = px.bar(
                medalhas_serie_unique,
                x="Serie",
                y='quantidade',
                text = 'quantidade',
                color = "Serie",
                category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
                template = template_dash,
                color_discrete_sequence=colors
            )

            fig_medalhas_serie_unique.update_layout(
                showlegend=False,
                xaxis_title="S√©rie",
                yaxis_title="# Quantidade",
                plot_bgcolor=bg_color_dash,
                title={
                    'text': "<b> # ESTUDANTES √öNICOS COM MEDALHA POR S√âRIE </b>",
                    'y':0.9,
                    'x':0.5,
                    'xanchor': 'center',
                    'yanchor': 'top'
                }
            )

            fig_medalhas_serie_unique.update_yaxes(visible=False, showticklabels=False)

            st.plotly_chart(fig_medalhas_serie_unique,use_container_width=True)
        with col2:

            st.metric(label="Total de estudantes com alguma medalha",
                    value=len(df_selection.loc[(df_selection['Medalhas acad√™micas'].notnull())]['Medalhas acad√™micas']),
                    help = "Estudantes √∫nicos com pelo menos uma medalha")

            fig_medalhas_serie_pct = px.line(
                medalhas_serie_unique,
                x="Serie",
                y="% Serie",
                text = 'quantidade',
                category_orders={'Serie':['8¬∫ EF','9¬∫ EF','1¬∫ EM','2¬∫ EM','3¬∫ EM']},
                template = template_dash,
                color_discrete_sequence=colors
            )

            fig_medalhas_serie_pct.update_traces(texttemplate='%{y}%', textposition='top center',textfont_size=15)

            fig_medalhas_serie_pct.update_layout(
                showlegend=False,
                xaxis_title="S√©rie",
                yaxis_title="Percentual em rela√ß√£o ao total da s√©rie",
                plot_bgcolor=bg_color_dash,
                title={
                    'text': "<b> % DA S√âRIE COM ALGUMA MEDALHA/INSCRI√á√ÉO </b>",
                    'y':0.9,
                    'x':0.5,
                    'xanchor': 'center',
                    'yanchor': 'top'
                }
            )

            fig_medalhas_serie_pct.update_xaxes(showgrid=False)

            #fig_medalhas_serie_pct.update_yaxes(showgrid=False)

            st.plotly_chart(fig_medalhas_serie_pct,use_container_width=True)
        ## ----- segunda linha
        medalha_competicao = df_olimp.groupby(by=['Olimp√≠ada', 'Status da Inscri√ß√£o']).size().reset_index()
        medalha_competicao['quantidade'] = medalha_competicao.loc[:,0]
        medalha_competicao = medalha_competicao.sort_values(['quantidade'],ascending=False)

        fig_medalha_competicao = px.bar(
                medalha_competicao,
                y="Olimp√≠ada",
                x="quantidade",
                text = "quantidade",
                color = "Status da Inscri√ß√£o",
                color_discrete_sequence = colors,
                template = template_dash,
                barmode='stack',
                orientation = 'h',
                height = 600
            )

        fig_medalha_competicao.update_traces(texttemplate='%{x}',
            textposition='inside',
            textfont_size=11,
            insidetextanchor = 'middle')

        fig_medalha_competicao.update_yaxes(tickangle=0) #tickfont=dict(size=9),)

        fig_medalha_competicao.update_xaxes(visible=False)

        fig_medalha_competicao.update_layout(yaxis=dict(autorange="reversed"), legend=dict(
            xanchor="right",
            x=0.99,
            yanchor="top",
            y=0.55
            ))


        fig_medalha_competicao.update_layout(
            plot_bgcolor=bg_color_dash,
            title={
            'text': "<b> STATUS DE INSCRI√á√ÉO POR OLIMP√çADA </b>",
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
            }
            )
        st.plotly_chart(fig_medalha_competicao,use_container_width=True)

    with tab4:

        #quantidade de contato com os alunos
        tutor_quinz = df_quinzenal[['Tutor','Quantidade de contatos']].groupby(by=['Tutor']).sum().reset_index()
        tutor_quinz = pd.DataFrame(data=tutor_quinz)

        #% de foco da quinzena realizado
        #(f√≥mula interna da planilha) nesse caso, se o aluno estava no foco e foi contatado = 1; se estava no foco e n√£o foi contatado = 0
        quinzenal_foco = df_quinzenal.dropna(subset=['Tema priorit√°rio'])
        quinzenal_foco = quinzenal_foco[['Tutor','Foco']].groupby(by=['Tutor']).mean().reset_index()
        quinzenal_foco['Foco'] = round(100*quinzenal_foco['Foco']).astype(int)
        quinzenal_foco = pd.DataFrame(data=quinzenal_foco)

        #merge
        tutor_quinz = tutor_quinz.merge(quinzenal_foco, left_on='Tutor', right_on='Tutor')

        fig_tutor_quinz_pct = px.line(
            tutor_quinz,
            x="Tutor",
            y="Foco",
            text = "Foco",
            template = template_dash,
            color_discrete_sequence=colors
        )

        fig_tutor_quinz_pct.update_traces(texttemplate='%{y}%', textposition='top center',textfont_size=15)

        fig_tutor_quinz_pct.update_layout(
            showlegend=False,
            xaxis_title="Tutor",
            yaxis_title="Percentual de focos da quinzena realizados",
            plot_bgcolor=bg_color_dash,
            title={
                'text': "<b> % DO FOCO REALIZADO PELO TUTOR </b>",
                'y':0.95,
                'x':0.5,
                'xanchor': 'center',
                'yanchor': 'top'
            }
        )

        fig_tutor_quinz_pct.update_xaxes(showgrid=False)
        st.plotly_chart(fig_tutor_quinz_pct,use_container_width=True)

        fig_tutor_quinz = px.bar(
            tutor_quinz,
            x="Tutor",
            y='Quantidade de contatos',
            text = 'Quantidade de contatos',
            color = "Tutor",
            template = template_dash,
            color_discrete_sequence=colors
        )

        fig_tutor_quinz.update_layout(
            showlegend=False,
            xaxis_title="Tutor",
            yaxis_title="Quantidade de contatos",
            plot_bgcolor=bg_color_dash,
            title={
                'text': "<b> CONTATOS POR TUTOR </b>",
                'y':0.9,
                'x':0.5,
                'xanchor': 'center',
                'yanchor': 'top'
            }
        )

        fig_tutor_quinz.update_yaxes(visible=False, showticklabels=False)

        st.plotly_chart(fig_tutor_quinz,use_container_width=True)

    with tab5:

        st.markdown('O Khan Academy foi uma atividade pontual disponibilizada para os alunos de 8¬∫ EF e 9¬∫ EF entre Fevereiro e Mar√ßo de 2023. Portanto, na sele√ß√£o abaixo voc√™ pode escolher os gr√°ficos serem vistos como:')
        st.markdown('**"13/03/2023"** - Da forma como fechou o engajamento/progresso na data de fechamento da atividade (Op√ß√£o padr√£o);')
        st.markdown('Ou **"Hoje"** - A partir da base ativa atual, entender qual o percentual de quem ainda est√° no IOL atualmente que realizou a atividade.')
        st.markdown('Os n√∫meros diferem entre si de acordo com a base ativa, uma vez que ocorrem desligamentos dos alunos ao longo do ano.')

        col1,espaco1,col2 = st.columns([1,1,1])
        with col1:
            select = st.selectbox(
                "Selecione o tipo de visualiza√ß√£o:",
                options=['13/03/2023','Hoje'],
                help = 'Escolha qual base ativa voc√™ gostaria de ver os dados abaixo'
                )
            if select == '13/03/2023':
                @st.cache_data
                def importar_dashkhan():
                    df_dash2023khan = pd.read_excel(r"Dash 360 Final_2023_Khan.xlsx")
                    df_dash2023khan = df_dash2023khan[df_dash2023khan['Status'] == 'ATIVO']
                    return df_dash2023khan

                df_base_khan = importar_dashkhan()
            else:
                df_base_khan = df_selection

        ## O khan academy √© uma atividade eventual disponibilizada apenas para o 8¬∫EF e 9¬∫ EF no come√ßo de 2023
        ## Portanto, certos filtros (ex.: tutor X que atende apenas 3¬∫ EM) ir√£o quebrar todos os gr√°ficos
        ## Nesse sentido, o condicional abaixo permite identificar e barrar a visualiza√ß√£o de dados

        if df_selection['8¬∫ EF e 9¬∫ EF - PROGRESSO KHAN ACADEMY'].isnull().all():
            st.write('N√£o √© poss√≠vel mostrar engajamento de khan com os filtros atuais. Khan Academy est√° dispon√≠vel apenas para alunos de 8¬∫ EF e 9¬∫ EF')
        else:
            df_khan = df_base_khan[(df_base_khan['Serie'] == '8¬∫ EF') | (df_base_khan['Serie'] == '9¬∫ EF')]

            #filtro de serie
            col1,espaco1 = st.columns([1,2])
            with col1:
                serie = st.multiselect(
                    "Selecione a s√©rie:",
                    options=df_khan['Serie'].dropna().unique(),
                    default=df_khan['Serie'].dropna().unique()
                    )
            ##ver se multiselect = None, then multiselect = default kkk
            ### quando n√£o tem s√©rie selecionada da√° erro

            df_khan = df_khan.query("Serie == @serie")

            ### % de alunos acima de 50% e % de alunos acima de 80%
            col1, espaco1, col2, espaco2 = st.columns([1,1,1,1])
            with col1:
                khan_mais50 = round(len(df_khan[df_khan['8¬∫ EF e 9¬∫ EF - PROGRESSO KHAN ACADEMY']>=50])/len(df_khan['8¬∫ EF e 9¬∫ EF - PROGRESSO KHAN ACADEMY'])*100)
                st.metric(label = "% da base com mais de 50% de progresso",
                        value = khan_mais50,
                        help = "De acordo com os filtros selecionados, essa √© a quantidade de estudantes da base com mais de 50% de engajamento dividido pela quantidade toal de estudantes ativos")

            with col2:
                khan_mais80 = round(len(df_khan[df_khan['8¬∫ EF e 9¬∫ EF - PROGRESSO KHAN ACADEMY']>=80])/len(df_khan['8¬∫ EF e 9¬∫ EF - PROGRESSO KHAN ACADEMY'])*100)
                st.metric(label = "% da base com mais de 80% de progresso",
                        value = khan_mais80,
                        help = "De acordo com os filtros selecionados, essa √© a quantidade de estudantes da base com mais de 80% de engajamento dividido pela quantidade toal de estudantes ativos")

            st.write("Progresso coletado de fevereiro at√© 12/03 para 9¬∫ EF e at√© 08/03 para 8¬∫ EF. Para participar do sorteio dos tablets, foram contabilizados apenas os alunos com +80% de progresso at√© 08/03 (independente da s√©rie).")

            col1,col2 = st.columns([1,1])

            with col1:
                ## gr√°fico de pizza de engajamento
                df_khan_pct = pd.pivot_table(df_khan,
                                    index = 'KHAN - Classifica√ß√£o',
                                    values = 'Nome',
                                    aggfunc = 'count')

                df_khan_pct['Percentual'] = round(((df_khan_pct['Nome'])/(df_khan_pct['Nome'].sum()))*100)
                fig_khan_pie = px.pie(
                        df_khan_pct,
                        values = 'Percentual',
                        title = "<b> PROGRESSO EM KHAN </b>",
                        names = df_khan_pct.index,
                        color_discrete_sequence = colors,
                        hole = .4,
                        template = template_dash)

                fig_khan_pie.update_traces(textposition='auto',
                                        texttemplate="%{percent:.0%} %{label}",
                                        textfont_size=15,
                                        sort = False)
                fig_khan_pie.update_layout(uniformtext_minsize=12,
                                        title={
                                            'text': "<b> PROGRESSO EM KHAN </b>",
                                            'y':0.9,
                                            'x':0.5,
                                            'xanchor': 'center',
                                            'yanchor': 'top'}
                                        )
                st.plotly_chart(fig_khan_pie,use_container_width=True)

            ## engajamento stacked por tutor(a)
            with col2:
                ## progresso por praca
                df_khan_praca = pd.crosstab(df_khan['KHAN - Classifica√ß√£o'],
                            df_khan['Pra√ßa'],
                            values = 'Nome',
                            aggfunc = 'count',
                            normalize='columns').applymap(lambda x: "{0:.0f}".format(100*x)).reset_index()

                df_khan_praca = pd.melt(df_khan_praca,id_vars='KHAN - Classifica√ß√£o',value_vars=df_khan_praca.columns.to_list(), var_name='Pra√ßa', value_name='percent')
                df_khan_praca['percent'] = pd.to_numeric(df_khan_praca['percent'])

                fig_khan_praca = px.bar(
                        df_khan_praca,
                        x='percent',
                        y="Pra√ßa",
                        text = "percent",
                        title = "<b> PROGRESSO EM KHAN POR PRA√áA </b>",
                        color = 'KHAN - Classifica√ß√£o',
                        color_discrete_sequence = colors,
                        template = template_dash,
                        barmode='stack',
                        orientation = 'h'
                    )
                fig_khan_praca.update_traces(texttemplate='%{x}',
                                            textposition='inside',
                                            textfont_size=11,
                                            textangle=0,
                                            insidetextanchor = 'middle'
                                            )

                fig_khan_praca.update_xaxes(tickfont=dict(size=11))

                fig_khan_praca.update_xaxes(visible=False)

                fig_khan_praca.update_layout(legend=dict(
                                                    orientation="h",
                                                    yanchor="bottom",
                                                    y=-0.25,
                                                    xanchor="right",
                                                    x=0.75))
                st.plotly_chart(fig_khan_praca,use_container_width=True)

            #progresso por tutor
            df_khan_tutor = pd.crosstab(df_khan['KHAN - Classifica√ß√£o'],
                                        df_khan['Tutor'],
                                        values = 'Nome',
                                        aggfunc = 'count',
                                        normalize='columns').applymap(lambda x: "{0:.0f}".format(100*x)).reset_index()

            df_khan_tutor = pd.melt(df_khan_tutor,id_vars='KHAN - Classifica√ß√£o',value_vars=df_khan_tutor.columns.to_list(), var_name='Tutor', value_name='percent')
            df_khan_tutor['percent'] = pd.to_numeric(df_khan_tutor['percent']) # transformando o pct em n√∫mero para ser processado pelo gr√°fico

            fig_khan_tutor = px.bar(
                    df_khan_tutor,
                    x='Tutor',
                    y="percent",
                    text = "percent",
                    title = "<b> PROGRESSO EM KHAN POR TUTOR(A) </b>",
                    color = 'KHAN - Classifica√ß√£o',
                    color_discrete_sequence = colors,
                    template = template_dash,
                    barmode='stack'
                )

            fig_khan_tutor.update_xaxes(tickfont=dict(size=11))

            fig_khan_tutor.update_yaxes(visible=False)

            fig_khan_tutor.update_layout(legend=dict(
                                                orientation="h",
                                                yanchor="bottom",
                                                y=-0.25,
                                                xanchor="right",
                                                x=0.75))

            fig_khan_tutor.update_traces(texttemplate='%{y}',
                                        textposition='inside',
                                        textfont_size=11,
                                        textangle=0,
                                        insidetextanchor = 'middle'
                                        )

            st.plotly_chart(fig_khan_tutor,use_container_width=True)

            ## puxar da planilha de acompanhamento
    #with tab6:
        #st.write(' :rotating_light: Esse gr√°fico **n√£o diz respeito √† nenhuma m√©trica de b√¥nus**, ele pontua a m√©dia de engajamento geral dos alunos ativos a fim de comparar com anos anteriores.:rotating_light:')

    hide_st_style="""
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            .css-9s5bis {visibility: visible;}
            </style>
            """
    st.markdown(hide_st_style, unsafe_allow_html=True)
